class Node{
    constructor(val){
        this.val = val;
        this.next = null;
        this.prev = null;
    }
}

class DoublyLinkedList{
  constructor(){
      this.head = null;
      this.tail = null;
      this.length = 0;
  }

  push(val){
    var newNode = new Node(val);
    if(this.length === 0){
      this.head = newNode;
      this.tail = newNode;
    }else{
      this.tail.next = newNode;
      newNode.prev = this.tail;
      this.tail = newNode;
    }
    this.length++
  }
  pop(){
    if(!this.head) return;
    var ogTail = this.tail;
    if(this.length === 1){
      this.head = this.tail = null;
    }else{
      this.tail = ogTail.prev;
      this.tail.next = null;
      ogTail.prev = null;
    }
    this.length--
    return ogTail;
  }
  shift(){
    if(!this.head) return;
    var ogHead = this.head;
    if(this.length === 1){
      this.head = this.tail = null;
    }else{
      this.head = ogHead.next;
      this.head.prev = null;
      ogHead.next = null;
      
    }
    this.length--
    return ogHead;
  }
  unshift(val){
    var newNode = new Node(val)
    if(!this.head){
     this.head = this.tail = newNode; 
    }else{
      var ogHead = this.head;
      ogHead.prev = newNode;
      this.head = newNode;
      newNode.next = ogHead;
    }
    this.length++;
  }
}

var DLL = new DoublyLinkedList()
// DLL.push('A')
// DLL.push('B')
DLL.unshift('C')
// DLL.shift();
DLL